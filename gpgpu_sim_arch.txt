simt core cluster ----- shader.h ----- simt_core_cluster (class name) - this has stats objects also 
object in gpu_sim.cc --- m_cluster
memory_config struct in gpgpu-sim.cc --- dram_configuration
shader_core_config class --- shader.h -- present in simt_core_cluster -- contains l1d_configuration
m_L1D : l1_cache object

shader.cc
memory_cycle() -> (if cache is enabled)process_memory_access_queue()
This step could be helpful for us
->process_cache_access() : function removing from queue if miss
acceessq_pop_back() : warp_inst_t class function
warp_inst_t is present in abstract_hardware_model.h file
mem_access_t class contains address, size, different parameters related to memory access.
accessq_count()



shader_core_ctx is class of shader core. possible global variable : gpu
where are shader_core_ctx is being called

What happens after a request is sent to cache: everything is in gpu-cache.cc
m_L1D --- object of l1_cache
access is happenning using access() function of l1_cache
l1_cache --- inherits from data_cache class. 
l1_cache access() function calls data_cache access function. 
data_cache access function is calling tag_array probe() function for cache lookup. after receiving the response process_tag_probe() function is called.
if it is a miss m_rd_miss() function is called. This is also present in data_cache class. --- rd_miss_base()
There is a miss queue for each core probably. 
rd_miss_base() --- send_read_request() function. in this function they are checking whether mshr has this address or not, if not mshr_avail? 

checking mshr to lower level memory access. 
checking data_cache class cycle() function. from this mem_fetch_interface class.
mshr_table() class is present in gpu-cache.h. object for mshr_table is m_mshrs

I am thinking that if there is l1 cache miss, they are reading from l2_cache because mshr is waiting on lower memory fill signals.


